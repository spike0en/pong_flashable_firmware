#!/sbin/sh
# Functions needed early
ui_print() { $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
abort() { ui_print "$1"; ui_print " "; exit 1; }

# Set vars
OUTFD=/proc/self/fd/$2
ZIPFILE="$3"
tmp=/dev/tmp

chooseport() {
  while true; do
    getevent -lc 1 2>&1 | grep VOLUME | grep " DOWN" > $tmp/events
    if (`cat $tmp/events 2>/dev/null | grep VOLUME >/dev/null`); then
      break
    fi
  done
  if (`cat $tmp/events 2>/dev/null | grep VOLUMEUP >/dev/null`); then
    return 0
  else
    return 1
  fi
}

# Detect Magisk Manager/booted flashing
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
$BOOTMODE && abort "You need to flash this from Orangefox Recovery!"

ui_print "***************************************"
ui_print "*  Nothing Phone (2) Firmware Flasher *"
ui_print "*    Build: <Mentioned in filename>   *"
ui_print "*   Initial Script by Wishmasterflo   *"
ui_print "*     Adapted for Pong by spike0en    *"
ui_print "***************************************"

set -x
rm -rf $tmp
mkdir -p $tmp
unzip -o "$ZIPFILE" -d $tmp || abort "Failed to extract zip!"
sleep 1

ui_print " "
ui_print "**********************************************"
ui_print "Device: Nothing Phone 2 (Pong)"
ui_print "Target NOS Build: <Mentioned in filename>"
ui_print "**********************************************"
ui_print " "
ui_print "Continue? Vol+ yes, Vol- no"
chooseport && flash=true || exit 0

# Function to flash a partition to both slots with error checking
flash_partition() {
  local partition_name=$1
  local image_file=$2
  local partition_path_a="/dev/block/bootdevice/by-name/${partition_name}_a"
  local partition_path_b="/dev/block/bootdevice/by-name/${partition_name}_b"
  local source_image="$tmp/firmware-update/$image_file"

  ui_print "Updating $partition_name..."

  # Check if image file exists
  if [ ! -f "$source_image" ]; then
    abort "Error: Image file $source_image not found in zip!"
  fi

  # Flash Slot A
  dd if="$source_image" of="$partition_path_a" bs=4k
  if [ $? -ne 0 ]; then
    abort "Error flashing $partition_name to slot A!"
  fi

  # Flash Slot B
  dd if="$source_image" of="$partition_path_b" bs=4k
  if [ $? -ne 0 ]; then
    abort "Error flashing $partition_name to slot B!"
  fi
}

# Firmware partition images
ui_print "Flashing Nothing OS firmware to both slots A and B..."
flash_partition abl abl.img
flash_partition aop aop.img
flash_partition aop_config aop_config.img
flash_partition bluetooth bluetooth.img
flash_partition cpucp cpucp.img
flash_partition devcfg devcfg.img
flash_partition dsp dsp.img
flash_partition featenabler featenabler.img
flash_partition hyp hyp.img
flash_partition imagefv imagefv.img
flash_partition keymaster keymaster.img
flash_partition modem modem.img
flash_partition multiimgoem multiimgoem.img
flash_partition multiimgqti multiimgqti.img
flash_partition qupfw qupfw.img
flash_partition qweslicstore qweslicstore.img
flash_partition shrm shrm.img
flash_partition tz tz.img
flash_partition uefi uefi.img
flash_partition uefisecapp uefisecapp.img
flash_partition xbl xbl.img
flash_partition xbl_config xbl_config.img
ui_print "Firmware flashing complete!"

# Misc partition images
ui_print "Flashing some additionally required partition images to both slots A and B..."
flash_partition boot boot.img
flash_partition dtbo dtbo.img
flash_partition vendor_boot vendor_boot.img
flash_partition vbmeta_vendor vbmeta_vendor.img
flash_partition vbmeta_system vbmeta_system.img
ui_print "Additional partition flashing complete!"

# Cleanup tmp dir
rm -rf /dev/tmp

# Final instruction
ui_print " "
ui_print "If you want to flash a new ROM do that now before rebooting."
ui_print "NothingMuchROM users may also flash super and vbmeta (optional)."

exit 0
